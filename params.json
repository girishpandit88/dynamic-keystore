{"name":"Dynamic-keystore","tagline":"easing the pain of handling application configurations","body":"dynamic-keystore\r\n====================\r\n\r\nA service module that you can include in your services. It provides you with ways to dynamically pull your application/service configs from DynamoDB. Advantage over other similar services is that you manage your own configurations. Other advantage being, you can pretty much store your entire config in DynamoDB using this module. So your applications/services can be configuration free.\r\n\r\nTo get started\r\n\r\n```\r\n$ git clone\r\n$ mvn clean compile install\r\n```\r\n\r\nThen in you pom.xml include it as a dependency\r\n\r\n```xml\r\n<dependency>\r\n\t<groupId>com.gp.dynamic-keystore</groupId>\r\n    <artifactId>dynamic-keystore</artifactId>\r\n    <version>1.0.0-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\nFinally in your injector binding class initialize as show below. The DynamicKeystoreModule takes DynamoDB endpoint and a config table prefix. Pass empty strings if you want to use AWS DynamoDB endpoint and don't want to have a table prefix\r\n\r\n```java\r\nGuice.createInjector(new DynamicKeystoreModule(\"\", \"\"));\r\n```\r\n\r\nThen you can get your configs dynamically using something like below\r\n\r\n```java\r\nConfigService _service = injector.getInstance(ConfigService.class);\r\nString propertyAsString = _service.getConfig(\"service_name\",\"service_environment\", \"key\").get();\r\n```\r\n\r\nYou can also get a TypeSafe Config object as a config property\r\n\r\n```java\r\nConfig propertiesAsTypeSafeConfig = _service.getConfigs(\"service_name\", \"service_environment\").get();\r\n```\r\n\r\nTo save config you can use\r\n\r\n```java\r\n_service.putConfig(\"service_name\", \"service_environment\", \"key\", \"value\");\r\n```\r\n\r\nSince value is a String, you can even save your keystore/crt/pfx files and retrieve them.\r\n\r\n```java\r\n_service.setConfig(\"local\",\"dev\",\"config.file\",config.getConfig(\"dynamo\").toString());\r\n```\r\n\r\nTo delete config, use\r\n\r\n```java\r\n_service.deleteConfig(\"service_name\", \"service_environment\", \"key\");\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}